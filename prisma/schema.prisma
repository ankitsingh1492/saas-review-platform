generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id               String     @id @default(cuid()) @map("client_id")
  name             String     @map("client_name")
  domain           String
  brandingConfig   Json       @map("branding_config")
  subscriptionTier String     @map("subscription_tier")
  apiKeys          Json       @map("api_keys")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  createdById      String     @map("created_by_id")
  
  // Relations
  apiKeyRecords    APIKey[]
  auditLogs        AuditLog[]
  createdBy        User       @relation("UserClients", fields: [createdById], references: [id])
  reviews          Review[]

  @@map("clients")
}

model Review {
  id        String     @id @default(cuid()) @map("review_id")
  userId    String     @map("user_id")
  clientId  String     @map("client_id")
  rating    Int
  content   String
  mediaUrls Json?      @map("media_urls")
  status    String     @default("pending")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  
  // Relations
  auditLogs AuditLog[]
  media     Media[]
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model User {
  id            String     @id @default(cuid()) @map("user_id")
  email         String?    @unique
  password      String?
  name          String?
  role          String?    @default("user")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  emailVerified DateTime?  @map("email_verified")
  image         String?
  
  // Relations
  apiKeys       APIKey[]
  accounts      Account[]
  auditLogs     AuditLog[]
  clients       Client[]   @relation("UserClients")
  sessions      Session[]
  reviews       Review[]

  @@map("users")
}

model APIKey {
  id        String    @id @default(cuid()) @map("api_key_id")
  key       String    @unique @map("api_key")
  userId    String    @map("user_id")
  clientId  String?   @map("client_id")
  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime? @map("expires_at")
  isActive  Boolean   @default(true) @map("is_active")
  
  // Relations
  client    Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Media {
  id         String   @id @default(cuid()) @map("media_id")
  url        String
  thumbnail  String?
  type       String   @map("media_type")
  uploadedBy String   @map("uploaded_by")
  reviewId   String?  @map("review_id")
  createdAt  DateTime @default(now()) @map("created_at")
  
  // Relations
  review     Review?  @relation(fields: [reviewId], references: [id], onDelete: SetNull)

  @@map("media")
}

model AuditLog {
  id        String   @id @default(cuid()) @map("audit_log_id")
  action    String
  userId    String?  @map("user_id")
  clientId  String?  @map("client_id")
  reviewId  String?  @map("review_id")
  details   Json?
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  review    Review?  @relation(fields: [reviewId], references: [id], onDelete: SetNull)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model Account {
  id                String   @id @default(cuid()) @map("account_id")
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("session_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  
  @@id([identifier, token])
  @@map("verification_tokens")
}