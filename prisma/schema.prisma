// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id              String   @id @default(cuid())
  name            String
  domain          String
  brandingConfig  Json
  subscriptionTier String
  apiKeys         Json
  reviews         Review[]
  apiKeyRecords   APIKey[]
  auditLogs       AuditLog[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // New fields for relationship
  createdById     String
  createdBy       User     @relation("UserClients", fields: [createdById], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  clientId  String
  rating    Int
  content   String
  mediaUrls Json?
  status    String
  client    Client   @relation(fields: [clientId], references: [id])
  media     Media[]
  auditLogs AuditLog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String?
  role      String   // e.g., 'admin', 'client'
  apiKeys   APIKey[]
  auditLogs AuditLog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // New field for relationship
  clients   Client[] @relation("UserClients")
  // NextAuth relations
  accounts  Account[]
  sessions  Session[]
}

model APIKey {
  id        String   @id @default(cuid())
  key       String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime?
  isActive  Boolean  @default(true)
}

model Media {
  id          String   @id @default(cuid())
  url         String   // S3 or other storage URL
  thumbnail   String?  // Optional thumbnail URL
  type        String   // e.g., 'image', 'video', 'document'
  uploadedBy  String
  reviewId    String?
  review      Review?  @relation(fields: [reviewId], references: [id])
  createdAt   DateTime @default(now())
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String   // e.g., 'CREATE_REVIEW', 'DELETE_MEDIA', etc.
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  clientId    String?
  client      Client?  @relation(fields: [clientId], references: [id])
  reviewId    String?
  review      Review?  @relation(fields: [reviewId], references: [id])
  details     Json?
  createdAt   DateTime @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@unique([identifier, token])
}
